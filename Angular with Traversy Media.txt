// SOURCE
Youtube: https://www.youtube.com/watch?v=3dHNOWTI7H8&t=3089s
Github: https://github.com/bradtraversy/angular-crash-2021

______________________________________________________________________________________
**************************************************************************************
// ANGULAR CLI & SETUP

1. Install the Angular globally:
>> ng install -g @angular/cli

----------------------------------------------------------------------
2. Create new app:
>> ng new app_name

----------------------------------------------------------------------
3. Generate component (components folder is optional):
>> ng generate component components_folder/component_name

----------------------------------------------------------------------
4. Generate service (services folder is optional):
>> ng generate service services_folder/service_name

----------------------------------------------------------------------
5. Run your angular app (at localhost:4200):
>> ng serve

______________________________________________________________________________________
**************************************************************************************
// COMPONENT INPUT (for reusable button)

1. Generate new component for button:
>> ng generate component components/button

----------------------------------------------------------------------
2. Edit button.component.html:
<button class="btn" [ngStyle]="{'background-color': color}" (click)="onClick()">
    {{ text }}
</button>

----------------------------------------------------------------------
3. Edit button.component.ts:
import { Component, Input, Output, EventEmitter } from '@angular/core';

export class ButtonComponent {
  @Input() text: string = "";
  @Input() color: string = "";
  @Output() btnClick = new EventEmitter();

  onClick() {
    this.btnClick.emit();
  }
}

----------------------------------------------------------------------
4. Edit header.component.html (any component to use the button):
<header>
    <app-button color="green" text="add" (btnClick)="toggleAddInventory()">
    </app-button>
</header>

----------------------------------------------------------------------
5. Edit header.component.ts:
export class HeaderComponent {
  toggleAddInventory() {
    this.uiService.toggleAddInventory();
  }
}

______________________________________________________________________________________
**************************************************************************************
// INTERFACE

1. Create new .ts file in app folder:
e.g. "Inventory.ts"

----------------------------------------------------------------------
2. Edit "Inventory.ts":
export interface Inventory {
    id?: number;
    productName: string;
    description: string;
    quantity: number;
    unit: string;
    reminder: boolean;
}

______________________________________________________________________________________
**************************************************************************************
// JSON-SERVER SETUP

1. Install JSON server:
>> npm i json-server

----------------------------------------------------------------------
2. Edit package.json:
"scripts": {
    ...
    "server": "json-server --watch db.json --port 5000"
}

----------------------------------------------------------------------
3. Create .json file in src folder:
e.g. "db.json"

----------------------------------------------------------------------
4. Edit "db.json":
{
  "inventories": [
    {
      "productName": "item one",
      "description": "food",
      "quantity": 3,
      "unit": "piece",
      "reminder": true,
      "id": 1
    },
    {
      "productName": "item two",
      "description": "drinks",
      "quantity": 10,
      "unit": "bottle",
      "reminder": true,
      "id": 1
    }
  ]
}

----------------------------------------------------------------------
5. Run the json-server (at localhost:5000):
>> npm run server

______________________________________________________________________________________
**************************************************************************************
// ANGULAR HTTP CLIENT

1. Edit app.module.ts:
...
import { HttpClientModule } from '@angular/common/http';
...
@NgModule({
    ...
    imports: [
        ...
        HttpClientModule,
    ]
})

______________________________________________________________________________________
**************************************************************************************
// FETCH, SUBSCRIBING & DELETE (get & delete inventories)

1. Generate new service
>> ng generate service services/inventory

----------------------------------------------------------------------
2. Edit inventory.service.ts:
...
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Inventory } from '../Inventory';
...
export class InventoryService {
  private apiUrl = 'http://localhost:5000/inventories';
  constructor(private http: HttpClient) {}

  getInventories(): Observable<Inventory[]> {
    return this.http.get<Inventory[]>(this.apiUrl);
  }

  deleteInventories(inventory: Inventory): Observable<Inventory> {
    const url = `${this.apiUrl}/${inventory.id}`
    return this.http.delete<Inventory>(url);
  }
}

----------------------------------------------------------------------
3. Generate new component:
>> ng generate component components/inventories

----------------------------------------------------------------------
4. Edit inventories.component.ts:
import { Component, OnInit } from '@angular/core';
import { Inventory } from 'src/app/Inventory';
import { InventoryService } from 'src/app/services/inventory.service';

...
export class InventoriesComponent implements OnInit {
  inventories: Inventory[] = [];

  constructor(private inventoryService: InventoryService) {}

  ngOnInit(): void{
    this.inventoryService
      .getInventories()
      .subscribe((inventories) => this.inventories = inventories);
  }

  deleteInventory(inventory: Inventory) {
    this.inventoryService
      .deleteInventories(inventory)
      .subscribe(() => (this.inventories = this.inventories.filter(i => i.id !== inventory.id)));
  }
}

______________________________________________________________________________________
**************************************************************************************
// LOOPING WITH *ngFor (to show the fetched data)

1. Edit inventories.component.html:
<div class="table-container">
    <table>
        ...
        <tbody>
            <tr *ngFor="let inventory of inventories">
                <td>{{ inventory.productName }}</td>
                <td>{{ inventory.description }}</td>
                <td>{{ inventory.quantity }}</td>
                <td>{{ inventory.unit }}</td>
            </tr>
        </tbody>
    </table>
</div>

______________________________________________________________________________________
**************************************************************************************
// FONTAWESOME SETUP (to create delete icons)

1. Install fontawesome:
>> ng add @fortawesome/angular-fontawesome

----------------------------------------------------------------------
2. Choose fontawesome icon packages:
Press arrow-keys to navigate, space-bar to choose, enter to continue.

----------------------------------------------------------------------
3. Edit the components.ts where to use icons (e.g: inventories.component.ts):
...
import { faTimes } from '@fortawesome/free-solid-svg-icons';
...
export class InventoriesComponent implements OnInit {
  ...
  faTimes = faTimes;
  ...
}

----------------------------------------------------------------------
4. Add the fa-icon element in inventories.component.html:
<div class="table-container">
    <table>
        ...
        <tbody>
            <tr *ngFor="let inventory of inventories">
                ...
                <fa-icon
                    [icon]="faTimes"
                    [ngStyle]="{color: 'red'}"
                    (click)="deleteInventory(inventory)"
                    >
                </fa-icon>
            </tr>
        </tbody>
    </table>
</div>

______________________________________________________________________________________
**************************************************************************************
 // FORMS MODULE

 1. Edit app.module.ts:
...
import { FormsModule } from '@angular/forms';
...
@NgModule({
  ...
  imports: [
    ...
    FormsModule,
  ],
})

----------------------------------------------------------------------
2. Generate new component:
>> ng generate component components/add-inventory

----------------------------------------------------------------------
3. Edit inventories.component.html (any component to place the form):
<app-add-inventory (onAddTask)="addInventory($event)"></app-add-inventory>
<div class="table-container">
    ...
</div>

----------------------------------------------------------------------
4. Edit add-inventory.component.html:
<form class="add-form">
    <div class="form-control">
        <label for="productName">Product</label>
        <input type="text" name="productName" [(ngModel)]="productName" id="productName"
            placeholder="Enter product name">
    </div>
    <div class="form-control">
        <label for="description">Description</label>
        <input type="text" name="description" [(ngModel)]="description" id="description"
            placeholder="Enter product description">
    </div>
    <div class="form-control">
        <label for="quantity">Quantity</label>
        <input type="number" name="quantity" [(ngModel)]="quantity" id="quantity" placeholder="Enter quantity">
    </div>
    <div class="form-control">
        <label for="unit">Unit</label>
        <input type="text" name="unit" [(ngModel)]="unit" id="unit" placeholder="Enter unit">
    </div>
    <div class="form-control form-control-check">
        <label for="reminder">Set reminder</label>
        <input type="checkbox" name="reminder" [(ngModel)]="reminder" id="reminder">
    </div>
    <input type="submit" value="Save Inventory" class="btn btn-block">
</form>

______________________________________________________________________________________
**************************************************************************************
// SUBMIT and CREATE (to add new inventories)

1. Edit add-inventory.component.ts:
import { Component, EventEmitter, Output } from '@angular/core';
import { Inventory } from 'src/app/Inventory';
...
export class AddInventoryComponent {
  @Output() onAddInventory: EventEmitter<Inventory> = new EventEmitter();

  productName: string = "";
  description: string = "";
  quantity: number = 0;
  unit: string = "";
  reminder: boolean = false;
  showAddInventory: boolean = false;
  subscription: Subscription;

  onSubmit() {
    if (!this.productName) {
      alert("Please enter product name");
      return;
    }

    if (this.quantity < 1) {
      alert("Invalid quantity");
      return;
    }

    const newInventory = {
      productName: this.productName,
      description: this.description,
      quantity: this.quantity,
      unit: this.unit,
      reminder: this.reminder,
    }

    this.onAddInventory.emit(newInventory);

    this.productName = "";
    this.description = "";
    this.quantity = 0;
    this.unit = "";
    this.reminder = false;
  }
}

----------------------------------------------------------------------
2. Edit add-inventory.component.html:
<form class="add-form" (ngSubmit)="onSubmit()">
    ...
</form>

----------------------------------------------------------------------
3. Edit inventory.service.ts:
...
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Inventory } from '../Inventory';

const httpOptions = {
  headers: new HttpHeaders({
    'Content-type': 'application/json'
  })
}
...
export class InventoryService {
  constructor(private http: HttpClient) {}
  private apiUrl = 'http://localhost:5000/inventories'
  ...
  addInventory(inventory: Inventory) {
    return this.http.post<Inventory>(this.apiUrl, inventory, httpOptions);
  }
}

----------------------------------------------------------------------
4. Edit inventories.component.ts (component that has add-inventory tag that calls onAddInventory):
...
import { Inventory } from 'src/app/Inventory';
import { InventoryService } from 'src/app/services/inventory.service';
...
export class InventoriesComponent implements OnInit {
  constructor(private inventoryService: InventoryService) {}
  ...
  addInventory(inventory: Inventory) {
    this.inventoryService
      .addInventory(inventory)
      .subscribe(inventory => this.inventories.push(inventory)); 
  }
}

----------------------------------------------------------------------
5. Edit inventories.component.html:
<app-add-inventory (onAddInventory)="addInventory($event)"></app-add-inventory>
<div class="table-container">
    ...
</div>

______________________________________________________________________________________
**************************************************************************************
// UPDATE (toggle reminder of inventories and edit/update each inventory)

1. Edit inventory.service.ts:
...
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Inventory } from '../Inventory';

const httpOptions = {
  headers: new HttpHeaders({
    'Content-type': 'application/json'
  })
}
...
export class InventoryService {
  constructor(private http: HttpClient) {}
  private apiUrl = 'http://localhost:5000/inventories'

  ...
  updateReminder(inventory: Inventory): Observable<Inventory> {
    const url = `${this.apiUrl}/${inventory.id}`
    return this.http.put<Inventory>(url, inventory, httpOptions);
  }

  updateInventory(inventory: Inventory): Observable<Inventory> {
    const url = `${this.apiUrl}/${inventory.id}`;
    return this.http.put<Inventory>(url, inventory, httpOptions);
  }
}

----------------------------------------------------------------------
2. Edit inventories.component.ts:
...
import { Inventory } from 'src/app/Inventory';
import { InventoryService } from 'src/app/services/inventory.service';
...
export class InventoriesComponent implements OnInit {
  ...
  editingInventory: Inventory | null = null;
  constructor(private inventoryService: InventoryService) {}
  ...
  toggleReminder(inventory: Inventory) {
    inventory.reminder = !inventory.reminder;
    this.inventoryService
      .updateReminder(inventory)
      .subscribe();
  }

  editInventory(inventory: Inventory) {
  this.editingInventory = { ...inventory };
  }

  updateInventory() {
    if (!this.editingInventory) {
      return;
    }

    this.inventoryService.updateInventory(this.editingInventory).subscribe((updatedInventory) => {
      const index = this.inventories.findIndex(i => i.id === updatedInventory.id);
      if (index !== -1) {
        this.inventories[index] = updatedInventory;
      }
      // Clear the editingInventory
      this.editingInventory = null;
    });
  }

}

----------------------------------------------------------------------
3. Edit inventories.component.css (style that occurs when toggle):
...
.reminder {
    border-left: 5px solid green;
}

----------------------------------------------------------------------
4. Edit inventories.component.html (add any button/icon to call edit function):
...
<div class="table-container">
    <table>
        ...
        <tbody>
            <tr (dblclick)="toggleReminder(inventory)
                [ngClass]="{ reminder: inventory.reminder }">
                ...
                <button (click)="editInventory(inventory)">Edit</button>
            </tr>
        </tbody>
    </table>
</div>

______________________________________________________________________________________
**************************************************************************************
// TOGGLE BUTTON AND FORM VISIBILITY (enabling/disabling the button and form)

1. Generate new service:
>> ng generate service services/ui

----------------------------------------------------------------------
2. Edit ui.service.ts:
...
import { Observable, Subject } from 'rxjs';
...
export class UiService {
  private showAddInventory: boolean = false;
  private subject: Subject<any> = new Subject<any>();

  toggleAddInventory(): void {
    this.showAddInventory = !this.showAddInventory;
    this.subject.next(this.showAddInventory);
  }

  onToggle(): Observable<any> {
    return this.subject.asObservable();
  }
}

----------------------------------------------------------------------
3. Edit header.component.ts (component that has button that calls toggle function)
import { Component } from '@angular/core';
import { Subscription } from 'rxjs';
import { UiService } from 'src/app/services/ui.service';

@Component({
  selector: 'app-header',
  templateUrl: './header.component.html',
  styleUrls: ['./header.component.css']
})
export class HeaderComponent {
  showAddInventory: boolean = false;
  subscription: Subscription;

  constructor(private uiService: UiService) {
    this.subscription = this.uiService
    .onToggle()
    .subscribe((value) => (this.showAddInventory = value));
  }

  toggleAddInventory() {
    this.uiService.toggleAddInventory();
  }
}

----------------------------------------------------------------------
4. Edit header.component.html:
<header>
    <h1>Inventory Management System</h1>
    <app-button
        color="{{ showAddInventory ? 'red' : 'green' }}"
        text="{{ showAddInventory ? 'Close': 'add' }}"
        (btnClick)="toggleAddInventory()">
    </app-button>
</header>

----------------------------------------------------------------------
5. Edit add-inventory.component.ts:
import { Component, OnDestroy } from '@angular/core';
import { UiService } from 'src/app/services/ui.service';
import { Subscription } from 'rxjs';
...
export class AddInventoryComponent implements OnDestroy {
  ...
  showAddInventory: boolean = false;
  subscription: Subscription = new Subscription;

  constructor(private uiService: UiService) {
    this.subscription = this.uiService
    .onToggle()
    .subscribe((value) => (this.showAddInventory = value));
  }
  ...

  ngOnDestroy(): void {
    if (this.subscription) {
      this.subscription.unsubscribe();
    }
  }
}

----------------------------------------------------------------------
6. Edit add-inventory.component.html:
<form *ngIf="showAddInventory" ...">
    ...
</form>

______________________________________________________________________________________
**************************************************************************************
// ANGULAR ROUTER

1. Generate new component (for about page and footer)

----------------------------------------------------------------------
2. Edit app.module.ts:
...
import { RouterModule, Routes } from '@angular/router';

const appRoutes: Routes =  [
  {path: '', component: InventoriesComponent},
  {path: 'about', component: AboutComponent},
]

@NgModule({
  ...
  imports: [
    ...
    RouterModule.forRoot(appRoutes, {enableTracing: true})
  ],
})

----------------------------------------------------------------------
3. Edit app.component.html:
<div class="container">
  <app-header></app-header>
  <router-outlet></router-outlet>
  <app-footer></app-footer>
</div>

----------------------------------------------------------------------
4. Edit about.component.html:
<div class="about-page">
    ...
    <a routerLink="/">Go back</a>
</div>

----------------------------------------------------------------------
5. Edit footer.component.html:
<footer>
    ...
    <a routerLink="/about">About</a>
</footer>

______________________________________________________________________________________
**************************************************************************************
// LIMIT COMPONENT TO ROUTE

1. Edit header.component.ts (any component that contains the button to limit routing):
...
import { Router } from '@angular/router'
...
export class HeaderComponent {
  ...
  constructor(private uiService: UiService, private router: Router) {
    ...
  }
  ...
  hasRoute(route: string) {
    return this.router.url === route;
  }
}

----------------------------------------------------------------------
2. Edit header.component.html:
<header>
    ...
    <app-button *ngIf="hasRoute('/')" ...>
    </app-button>
</header>
