admin
afb_ims2023

***************************************************
// REQUIREMENTS
>> pip install django
>> pip install djangorestframework
>> pip install markdown
>> pip install django-filter
>> pip install django-cors-headers
>> pip install psycopg2

***************************************************
// DJANGO REST API
1. Create a Django Project and App:
>> pip install virtualenv
>> virtualenv ims_env
>> cd ims_venv
>> ims_venv\Scripts\activate
>> pip install django
>> django-admin startproject afb_ims
>> cd afb_im
>> python manage.py startapp inv_mgt

---------------------------------------------------
2. Install Django REST framework:
>> pip install djangorestframework
>> pip install markdown
>> pip install django-filter

---------------------------------------------------
3. Add 'rest_framework' and 'inv_mgt' to Project's Settings:
INSTALLED_APPS = [
    # ...
    'rest_framework',
]

---------------------------------------------------
4. Create a Model:
# models.py
from django.db import models

class MyModel(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField()

---------------------------------------------------
5. Create a Serializer:
# serializers.py
from rest_framework import serializers
from .models import MyModel

class MyModelSerializer(serializers.ModelSerializer):
    class Meta:
        model = MyModel
        fields = '__all__'

---------------------------------------------------
6. Create Views:
# views.py
from rest_framework import viewsets
from .models import MyModel
from .serializers import MyModelSerializer

class MyModelViewSet(viewsets.ModelViewSet):
    queryset = MyModel.objects.all()
    serializer_class = MyModelSerializer

---------------------------------------------------
7. Define URL Patterns:
# urls.py
from rest_framework.routers import DefaultRouter
from .views import MyModelViewSet

router = DefaultRouter()
router.register(r'mymodels', MyModelViewSet)

urlpatterns = router.urls

---------------------------------------------------
8. Migrate the Database:
>> python manage.py makemigrations
>> python manage.py migrate

---------------------------------------------------
9. Run the Development Server:
>> python manage.py runserver


---------------------------------------------------
10. Test the API:
#by making requests to the specified endpoints
(e.g., http://localhost:8000/mymodels/ for the MyModel API).

---------------------------------------------------

***************************************************
// DJANGO CROSS-ORIGIN RESOURCE SHARING (CORS)
1. Install the django-cors-headers package:
>> pip install django-cors-headers

---------------------------------------------------
2. Configure CORS settings:
# settings.py
INSTALLED_APPS = [
    # ...
    'corsheaders',
    # ...
]

MIDDLEWARE = [
    # ...
    'corsheaders.middleware.CorsMiddleware',  # Add this line
    # ...
]

CORS_ALLOW_ALL_ORIGINS = False  # Set this to False to use the CORS_ALLOWED_ORIGINS setting
CORS_ALLOWED_ORIGINS = [
    'http://localhost:4200',  # Replace with the URL of your Angular app
]

CORS_ALLOW_METHODS = ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS']

---------------------------------------------------
3. Configure Angular API Requests:
import { HttpClient, HttpHeaders } from '@angular/common/http';

const httpOptions = {
    headers: new HttpHeaders({
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': 'http://localhost:4200',  // Match the Django CORS settings
    }),
};

// Make API requests using the `httpOptions` when sending requests

---------------------------------------------------
4. Django Middleware Order:
#Ensure that the CorsMiddleware is included in the middleware list before other middlewares that handle request and response processing.
#The order of middleware matters in Django, so make sure it's placed correctly.


***************************************************
// POSTGRESQL TO DJANGO
1. Install the PostgreSQL Database:
#Install PostgreSQL from the official website
#(https://www.postgresql.org/download/)

---------------------------------------------------
2. Install the PostgreSQL adapter for Django:
>> pip install psycopg2

---------------------------------------------------
3. Configure Database Settings:
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'your_database_name',
        'USER': 'your_database_user',
        'PASSWORD': 'your_database_password',
        'HOST': 'localhost',  # Change to the host where your PostgreSQL server is running
        'PORT': '',           # You can specify a port if needed
    }
}

---------------------------------------------------
4. Apply Database Migrations:
>> python manage.py makemigrations
>> python manage.py migrate

---------------------------------------------------
5. Verify the Connection:
>> python manage.py runserver


***************************************************
// DJANGO-ANGULAR AUTHENTICATION
1. Create accounts and public app:
>> python manage.py startapp accounts
>> python manage.py startapp public

1. Edit settings.py
#Installed apps
INSTALLED_APPS = [
    ...
    'rest_framework',
    'accounts.apps.InvMgtConfig',
    'public.apps.PublicConfig',
]

#At the bottom
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ]
}

---------------------------------------------------
2. Edit ACCOUNTS views.py:
...
from rest_framework.authentication import SessionAuthentication, BasicAuthentication
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from rest_framework.views import APIView

class ProfileView(APIView):
    authentication_classes = [SessionAuthentication, BasicAuthentication]
    permission_classes = [IsAuthenticated]

    def get(self, request, format=None):
        content = {
            'user': str(request.user),  # `django.contrib.auth.User` instance.
            'auth': str(request.auth),  # None
        }
        return Response(content)

---------------------------------------------------
3. Edit ACCOUNTS app urls.py:
from django.urls import path
from rest_framework.urlpatterns import format_suffix_patterns
from accounts import views

urlpatterns = [
    #Users URL
    path('profile/', views.ProfileView.as_view()),
]

urlpatterns = format_suffix_patterns(urlpatterns)

---------------------------------------------------
4. Edit ROOT urls.py:
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('accounts/', include('accounts.urls')),
    path('api/auth/', include("rest_framework.urls")),
]

5. Create super user:
>> python manage.py createsuperuser

6. Run migrations to apply changes:
>> python manage.py makemigrations
>> python manage.py migrate

7. Create another app as PUBLIC:
>> python manage.py 

8. Edit ACCOUNTS app views:
from rest_framework.authtoken.views import ObtainAuthToken
from rest_framework.authtoken.models import Token
from rest_framework.response import Response

class CustomAuthToken(ObtainAuthToken):

    def post(self, request, *args, **kwargs):
        serializer = self.serializer_class(data=request.data,
                                           context={'request': request})
        serializer.is_valid(raise_exception=True)
        user = serializer.validated_data['user']
        token, created = Token.objects.get_or_create(user=user)
        return Response({
            'token': token.key,
            'user_id': user.pk,
            'email': user.email
        })
And in your urls.py:

urlpatterns += [
    path('api-token-auth/', CustomAuthToken.as_view())
]
With Django admin
It is also possible to create Tokens manually through the admin interface. In case you are using a large user base, we recommend that you monkey patch the TokenAdmin class customize it to your needs, more specifically by declaring the user field as raw_field.

your_app/admin.py:

from rest_framework.authtoken.admin import TokenAdmin

TokenAdmin.raw_id_fields = ['user']
Using Django manage.py command

9. Generate token:
>> python manage.py drf_create_token <username>